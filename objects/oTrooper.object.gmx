<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTrooper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>sBig_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Crawling and falling and shooting enemy</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables and shit
event_inherited();
hp = 120;
damage = 0.6;

state = "wander"; // "wander", "attack" 
state2 = "wait" //"wait", "shoot"
xTo = 0; // walking distance
dir = 0;

image_speed = 0;
image_index = 0;
scale_x = 1; 
isShooting = false;

alarm[0] = 1; // Fall
alarm[1] = 1; // Random direction
alarm[2] = 1 // Shoot check



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// X and Y origin offsets
// distance to origin
x_offset = 0;
y_offset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shoot timer
if global.gameMove{
    if state == "attack"{
        if state2 == "wait"{
            state2 = "shoot"
            audio_play_sound(snd_enemy_shoot,1,0);
        }else if state2 == "shoot"{
            state2 = "wait"
        }
    }else{
        state2 = "wait"
    }
}

alarm[2] = 35;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set random direction and distance
if state == "wander"{
    dir = choose (1,0,-1);
    xTo = choose (2,4,4,8,16);
}

alarm[1] = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// gravity
if global.gameMove{
    if place_free(x,y+2){
        y += 2;
    }
}

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect Howard
if global.gameMove{
    if ((bbox_right &gt; view_xview[global.myView]+40) &amp;&amp; (bbox_left &lt; view_xview[global.myView] + view_wview[global.myView]-40)) &amp;&amp;
    !collision_line(x,y,oHoward.x,oHoward.y,oBlock,true,false){ 
        state = "attack";
    }else{
        state = "wander";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if global.gameMove{
    if state == "wander"{
        if dir == -1{
            if place_empty(x - 1, y) and !place_empty(x,y+1){
                i = 0
                if i &lt; xTo hspeed = -1;
            }else{
                hspeed = 0;
            }
        }else if dir == 1{
            if place_empty(x + 1, y) and !place_empty(x,y+1){
                i = 0
                if i &lt; xTo hspeed = 1;
            }else{
                hspeed = 0;
            }
        }else{
            x = xprevious;
            hspeed = 0;
        }
    }else if state == "attack"{
        if state2 == "wait"{
            if oHoward.x &gt; x{
                if place_free(x+1,y){
                    hspeed = 1.75;            
                }else{
                    hspeed = 0;
                }
            }else if oHoward.x &lt; x{
                if place_free(x-1,y){
                    hspeed = -1.75;
                }else{
                    hspeed = 0;
                }
            }else{
                hspeed = 0;
            }
        }else{
            hspeed = 0;
        }
    }
}else{
    hspeed = 0;
    x = xprevious;
    y = yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player collision
if global.gameMove{
    if !place_meeting(x,y,oHoward) &amp;&amp; place_meeting(x,y-2,oHoward){
        if (hspeed &gt; 0) &amp;&amp; place_free(x+4,y-8){
            oHoward.x += hspeed;
        }else if (hspeed &lt; 0) &amp;&amp; place_free(x-4,y-8){
            oHoward.x += hspeed;      
        } 
    }  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dai
if hp &lt;= 0 {
   score += 100;
   instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If not injured, make it normal colored (not red)
if global.gameMove{
    with oHoward{
         if !shoot{
          image_blend = c_white;
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision with world objects
if global.gameMove{
    if place_meeting(x,y+1,oConveyorLeft){
        x -= 1;
    }
    
    if place_meeting(x,y+1,oConveyorRight){
        x += 1;
    }
    
    if place_meeting(x,y+1,oLava){
        hp -= .15;
        image_blend = choose(c_red, c_white);
    }else{
        if !oHoward.shoot{
            image_blend = c_white;
        }
    }
}


/// Get unstuck if stuck
if place_meeting(x,y+2,oBlock){
    oth = instance_place(x,y+2,oBlock);
    if bbox_bottom &lt; oth.bbox_top+12{
        move_outside_solid(90,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
if global.gameMove{
    if (state == "attack" &amp;&amp; state2 == "shoot") &amp;&amp; instance_exists(oHoward){
        if !collision_line(x,y,instance_nearest(x,y,oHoward).x,instance_nearest(x,y,oHoward).y, oBlock,false,true) &amp;&amp; 
        !collision_line(x,y,instance_nearest(x,y,oHoward).x,instance_nearest(x,y,oHoward).y, oMcChicken,false,true) &amp;&amp;
        !collision_line(x,y,instance_nearest(x,y,oHoward).x,instance_nearest(x,y,oHoward).y, oBreak,false,true) {
            isShooting = true;
            
            direction = point_direction(x,y, oHoward.x, oHoward.y);
            max_length = distance_to_object(oHoward) + 24;
            
            for(i = 0; i &lt; max_length; i+=1){
                lx = x + lengthdir_x(i, direction);
                ly = y + lengthdir_y(i, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
            height = sin(random(1));
            
            // take damage          
            with (oHoward){
                if !shieldOn{
                    global.hp -= .5;
                    blend = choose(c_red,c_white);
                }else{
                    global.shp -= .66;
                }
            }
        }else{
            isShooting = false;
        }
    }else{
        isShooting = false;
    }
}else{
    isShooting = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Trooper
if global.gameMove{
    if hspeed &gt; 0{
        scale_x = 1;
        image_speed = .15;
    }else if hspeed &lt; 0{
        scale_x = -1;
        image_speed = .15;
    }else{
        image_index = 0;
        image_speed = 0;
    }
}else{
    image_index = 0;
    image_speed = 0;
}
if global.gameMove{
    if state == "wander" || (state == "attack" &amp;&amp; state2 == "wait"){
        draw_sprite_ext(sTrooper,image_index,x,y,scale_x, 1, image_angle, image_blend, image_alpha)
    }else if state == "attack" &amp;&amp; state2 == "shoot"{
        if oHoward.x &gt; x{
            draw_sprite_ext(sTrooperShoot,image_index,x,y,1, 1, image_angle, image_blend, image_alpha)
        }else{
            draw_sprite_ext(sTrooperShoot,image_index,x,y,-1, 1, image_angle, image_blend, image_alpha)
        }
    }
}else{
    draw_sprite_ext(sTrooper,image_index,x,y,scale_x, 1, image_angle, image_blend, image_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug

if global.debug{
    draw_set_font(fnt_system);
    draw_set_color(c_white);
    draw_text(x,y - 24, state + "/" +state2)
    
    draw_sprite_ext(mask_index,0,x,y,1,1,0,c_aqua,0.5);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw laser
if isShooting &amp;&amp; global.gameMove{
    // pulse laser code: thanks to reddit users [FmMan3] and [oldmankc]
    height = sin(random(1));
    draw_set_color(c_red);
    if oHoward.x &gt; x{
        draw_line_width(x + 8, y-2, lx,ly, (height * 4) + 0.1);
        draw_set_color(c_orange);
        draw_line_width(x + 8, y-2, lx,ly, (height * 1) + 0.1);
        draw_set_color(c_yellow);
        draw_line_width(x + 8, y-2, lx,ly, (height * 1) + 0.1)
    }else{
        draw_line_width(x - 8, y-2, lx,ly, (height * 4) + 0.1);
        draw_set_color(c_orange);
        draw_line_width(x - 8, y-2, lx,ly, (height * 1) + 0.1);
        draw_set_color(c_yellow);
        draw_line_width(x - 8, y-2, lx,ly, (height * 1) + 0.1)
    }
}else{}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
