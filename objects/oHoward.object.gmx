<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHoward_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init 
jumpCount = 0; 
jumpHeight = 52; // Modify for phun tymes
jumpBoots = false;

isJumping = false; 
isFalling = false;

status = "stand"; // "stand", "run", "in_air" "dead"
status_blend = "normal" // "normal", "shield", "zap", "hurt" use for flashing player

dir = 1; // -1 = left, 1 = right
spr = sHoward_stand; 
blend = c_white 
image_speed = .18;

global.shp = 100;
shieldOn = false;
hasTrans = false; // if Howard has picked up Transform object (oShrink)
shoot = false;
isShooting = false;

big = true;
sizex = 1; 
sizey = 1; 

alarm[1] = 1 // begin instance clear

talk = "";
alarm[2] = 2 // talk

underWater = false;
air = 100;

targetList = ds_list_create(); // empty target list (for shooting (old))
pause = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create HUD etc.
instance_create(0,0, oHud);

// Create joystick HUD
if global.touch{
    instance_create(view_xview[global.myView] +  32,view_yview[global.myView] +  90, oAnalog);
    instance_create(view_xview[global.myView] +  32,view_yview[global.myView] +  90, oAnalogBack); 
    instance_create(0, 0, oShieldTouch);
    instance_create(0, 0, oShootTouch);
    instance_create(0, 0, oShrinkTouch);
    
    touch1  = virtual_key_add(400, 164, 32, 32, vk_space);
    touch2 = virtual_key_add(368, 112, 32, 32, ord('X'));
    touch3 = virtual_key_add(336, 164, 32, 32, ord('Z'));
    
    //virtual_key_show(touch1);
    //virtual_key_show(touch2);
    //virtual_key_show(touch3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset talk 
talk = "";
global.gameMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OOB Instance Deactivation 
if global.gameMove{
    // deactivate all instances (except hud &amp; persistent objects)
    instance_deactivate_all(true);
    instance_activate_object(oHud);
    instance_activate_object(oAnalog);
    instance_activate_object(oAnalogBack);
    instance_activate_object(oShieldTouch);
    instance_activate_object(oShrinkTouch);
    instance_activate_object(oShootTouch);
    
    // then activate terrain region
    instance_activate_region(view_xview[global.myView]-64,view_yview[global.myView]-64,
    view_wview[global.myView] + 128,view_hview[global.myView] + 128,true);
    
    // deactivate any object than could possibly fall/move thru ground/walls
    instance_deactivate_object(oNPC);
    instance_deactivate_object(oSmiley);
    instance_deactivate_object(oImp);
    instance_deactivate_object(oTrooper);
    instance_deactivate_object(oBirb);
    instance_deactivate_object(oPush);
    instance_deactivate_object(oHplat);
    instance_deactivate_object(oVplat);
    instance_deactivate_object(oMine);
    
    // finally, activate all objects inside 'object graze border' (which is smaller than terrain one) 
    instance_activate_region(view_xview[global.myView]-32,view_yview[global.myView]-32,
    view_wview[global.myView] + 64,view_hview[global.myView] + 64,true);
}

alarm[1] = 1; // re-execute


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shield deplete countdown

if global.shp &gt; 0{
   global.shp -= .075;
   alarm[0] = 1;
}else{
   alarm[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define Input

if global.joykeys{
    gamepad_set_axis_deadzone(0, 0.5);
    
    left = keyboard_check(vk_left) || gamepad_button_check(0,gp_padl) || (gamepad_axis_value(0, gp_axislh) &lt; 0);
    right = keyboard_check(vk_right) || gamepad_button_check(0,gp_padr) || (gamepad_axis_value(0, gp_axislh) &gt; 0);
    down = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0,gp_padd) || (gamepad_axis_value(0, gp_axislv) &gt; 0);
    jump = keyboard_check(vk_up) || gamepad_button_check(0,gp_padu) || (gamepad_axis_value(0, gp_axislv) &lt; 0);
    
    shoot = keyboard_check(vk_space) || gamepad_button_check(0,gp_face2);
    shrink = keyboard_check_pressed(ord('X')) || gamepad_button_check_pressed(0,gp_face3);
    shield = keyboard_check_pressed(ord('Z')) || gamepad_button_check_pressed(0,gp_face1);
    start = keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0,gp_start);
}else if global.touch{
    left = oAnalog.x &lt; oAnalogBack.x - oAnalog.deadzone;
    right = oAnalog.x &gt; oAnalogBack.x + oAnalog.deadzone;
    down = oAnalog.y &gt; oAnalogBack.y + oAnalog.deadzone;
    jump = oAnalog.y &lt; oAnalogBack.y - oAnalog.deadzone;
    
    shoot =  keyboard_check(vk_space);
    shrink = keyboard_check_pressed(ord('X'))  &amp;&amp; oShrinkTouch.visible;
    shield = keyboard_check_pressed(ord('Z')) &amp;&amp; oShieldTouch.visible;
}

debugKey = keyboard_check_pressed(ord('D')) || gamepad_button_check_pressed(0,gp_select);
talkKey = keyboard_check_pressed(ord('A')) || gamepad_button_check_pressed(0,gp_face4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// View movement (non locking to borders)
view_xview[global.myView] = x - view_wview[global.myView]/2;
view_yview[global.myView] = y - view_hview[global.myView]/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// States and health
underWater = place_meeting(x,y,oWater); 

if global.hp &gt; 100 global.hp = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if global.gameMove{
    if !underWater{
        if left{
            dir = -1; 
            if place_free(x - 2,y){
                status = "run";
                x -= 2;
            }else{
                status = "stand";
            }
        }else if right{
            dir = 1; 
            if place_free(x + 2,y){
                status = "run";
                x += 2;
            }else{
                status = "stand";
            }
        }else{
            status = "stand";
        }
        
        // "Gravity"
        if place_free(x,y + 2){
            status = "in_air";
            if isFalling{
                y += 2;
            }
        }else{
            if !place_meeting(x, y + 2,oPush){
                move_contact_solid(270,-1);
            }
            
            isFalling = false;
            jumpCount = 0;
        }
        
        
        if jump{
            if (jumpCount &lt; jumpHeight){
                if !isFalling{
                    if place_free (x, y - 2){
                        y -= 2;
                    }
                    jumpCount +=1;
                }
            }else{
                isFalling = true;
            }
        }else{
            isFalling = true;
        }
    }else{
        if left{
            dir = -1; 
            if place_free(x - 1,y){
                status = "run";
                x -= 1;
            }else{
                status = "stand";
            }
        }else if right{
            dir = 1; 
            if place_free(x + 1,y){
                status = "run";
                x += 1;
            }else{
                status = "stand";
            }
        }else{
            status = "stand";
        }
        
        if place_free(x,y + 1){
            status = "in_air";
            if isFalling{
                y += 1;
            }
        }else{
            if !place_meeting(x, y + 2,oPush){
                move_contact_solid(270,-1);
            }
            
            isFalling = false;
            jumpCount = 0;
        }
        
        
        if jump{
            if (jumpCount &lt; jumpHeight){
                if !isFalling{
                    if place_free (x, y - 1){
                        y -= 1;
                    }
                    jumpCount +=.5;
                }
            }else{
                isFalling = true;
            }
        }else{
            isFalling = true;
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with Stuff
// (copy and paste for each stuff:^| )

if global.gameMove{

//-----------------------------------------------//
// Emoji
if place_meeting(x,y,oSmiley){
   if !shieldOn{
      global.hp = global.hp - oSmiley.damage;
      status_blend = "hurt";
   }else{
      global.shp = global.shp - oSmiley.damage;
      global.hp = global.hp - 0.10;
   }
}else{
   if !shieldOn{
      status_blend = "normal";
   }
}

//-----------------------------------------------//
// Imp
if place_meeting(x,y,oImp) {//&amp;&amp; oImp.state == "attack"{
    if !shieldOn{
        global.hp = global.hp - oImp.damage;
        status_blend = "hurt";
    }else{
        global.shp = global.shp - oImp.damage;
        global.hp = global.hp - 0.10;
    }
}else{
    if !shieldOn{
        status_blend = "normal"
    }
}

//  Walk on top of enemy
if place_meeting(x, y + 2,oImp){
    isFalling = false;
    jumpCount = 0;
    status = "stand";
    status_blend = "normal";
}

//-----------------------------------------------//
// Lava
if place_meeting(x, y + 2,oLava){
    if !shieldOn{
        global.hp -= .4;
        status_blend = "hurt";
    }else{
        global.shp = global.shp - 1;
        global.hp = global.hp - 0.10;
    }
}else{
    if !shieldOn{
        status_blend = "normal";
    }
}

//-----------------------------------------------//
// Conveyor Belts
if place_meeting(x,y + 1,oConveyorRight) &amp;&amp; place_free(x + 2,y){
    // sometimes life is easy
    x += 1;
}

if place_meeting(x,y + 1,oConveyorLeft) &amp;&amp; place_free(x - 2,y){
    x -= 1;
}

//-----------------------------------------------//
// Electric Fence (just the zaps)
if place_meeting(x,y,oZap){
   if !shieldOn{
      global.hp = global.hp - oZap.damage;
      status_blend = "zap";
   }else{
      global.shp = global.shp - oZap.damage;
      global.hp = global.hp - 0.10;
   }
}else{
   if !shieldOn{
      status_blend = "normal";
   }
}

//-----------------------------------------------//
// Bullets
if place_meeting(x,y,oBullet){
   if !shieldOn{
      global.hp = global.hp - oBullet.damage;
      status_blend = "hurt";
   }else{
      global.shp = global.shp - oBullet.damage;
      global.hp = global.hp - 0.10;
   }
}else{
   if !shieldOn{
      status_blend = "normal";
   }
}

}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wall-unstuck code
/*if place_meeting(bbox_right-4,y,oBlock){
    if place_free(bbox_left,y){
        x -= 1
    }else if place_free(x,bbox_top){
        y -= 1   
    }else if place_free(x,bbox_bottom){
        y += 1  
    } 
}else if place_meeting(bbox_left+4,y,oBlock){
    if place_free(bbox_right,y){
        x += 1
    }else if place_free(x,bbox_top){
        y -= 1   
    }else if place_free(x,bbox_bottom){
        y += 1  
    }  
}

if place_meeting(x,bbox_top-4,oBlock){
    if place_free(x,bbox_bottom){
        y += 1
    }
}else if place_meeting(x,bbox_bottom+4,oBlock){
    if place_free(bbox_top,y){
        y -= 1
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ice stuff
if global.gameMove{
    if left &amp;&amp; place_meeting(x,y + 2, oIce) &amp;&amp; place_empty(x - 2,y){
        if hspeed &gt; -1{
            hspeed -= .1; //.05
        }
    }else if right &amp;&amp; place_meeting(x,y + 2, oIce) &amp;&amp; place_empty(x + 2,y){
        if hspeed &lt; 1{
            hspeed += .1;
        }   
    }else if place_meeting(x,y + 2, oIce){
        if hspeed &lt; 0{
            hspeed += .0025;
        }else if hspeed &gt; 0{
            hspeed -= .0025; //.005
        }       
    }else{
        hspeed = 0;
    }
}else{
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over
if global.hp &lt;= 0 {
   global.gameMove = false;
   instance_change(oHoward_die,true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause game
if global.joykeys &amp;&amp; start{
    if global.gameMove{
        global.gameMove = false;
        talk = "Game Paused.";
        pause = true;
        sound_play(snd_pause);
    }else{
        global.gameMove = true;
        talk = "";
        pause = false;
        sound_play(snd_unpause);
    }
}

if !global.gameMove{
    image_speed = 0;
}else{
    image_speed = .15;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shield
if global.gameMove{
    if shield{
       if !shieldOn &amp;&amp; global.hp &gt; 20{
           global.hp -= 10; // uses energy
           global.shp = 100;
           shieldOn = true;
           alarm[0] = 1; // calls alarm 0, starting shield timer
       }else if shieldOn &amp;&amp; global.hp &gt; 20 &amp;&amp; global.shp &lt; 20 {
           global.hp -= 10;
           score -= 100;
           global.shp = 100;
           alarm[0] = 1;
       }
    }
    
    // test shield health
    if global.shp &lt;= 0{
       shieldOn = false;
       global.shp = 100;
    }
    
    // change character color
    if shieldOn{
       status_blend = "shield";
    }else{
       // whatever man
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shrink
if global.gameMove{
    if shrink{
       if hasTrans{
          if big{
             big = false;
          }else{
             if place_free(x,y-8){
                y -= 4;
                big = true;
             }
          }
       // this is a comment
       }
    }
    
    
    // size checks
    if big{
       mask_index = sBig_mask;
       sizex = 1;
       sizey = 1;
    }else{
       mask_index = sSmall_mask;
       sizex = 0.5;
       sizey = 0.5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
if global.gameMove{
    if instance_exists(oTarget){
        if !collision_line(x,y,instance_nearest(x,y,oTarget).x,instance_nearest(x,y,oTarget).y, oBlock,false,true){
            target = instance_nearest(x,y,oTarget);
        }else{
            target = instance_nth_nearest(x,y,oTarget,5);
        }
    }
    
    if instance_exists(target){
        if ((target.bbox_right &gt;= view_xview[global.myView]+120) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 240) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + 136) &amp;&amp; dir == 1){
            if (!collision_line(x, y, target.x, target.y, oBlock, false, true)){
                if shoot{
                    isShooting = true;
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = y + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                        break;
                        }
                    }
                    height = sin(random(1));
    
                    // take damage          
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
                
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                    target = noone;
                }
            }
           else target = noone;
    
        }else if ((target.bbox_right &gt; view_xview[global.myView]) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 120) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + 136) &amp;&amp; dir == -1)
            {
            if (!collision_line(x, y, target.x, target.y, oBlock, false, true))
                {
                if shoot{
                    isShooting = true;
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = y + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                            break;
                        }
                    }
    
                    // take damage
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
    
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                    target = noone;
                }
           }
        else target = noone;
        }
    else target = noone;
    }else target = noone;
    
    if target == noone{
        if shoot{
            isShooting = true;
            global.hp -= .020;
            direction = point_direction(x,y, view_xview[global.myView]+180*dir, y-4);
            max_length = 180;
    
            for(i = 0; i &lt; max_length; i+=1){
                lx = x + lengthdir_x(i, direction);
                ly = y + lengthdir_y(i, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
        }else{
            isShooting = false;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot (backup)
/*
if global.gameMove{
    if instance_exists(oTarget){
        if !collision_line(x,y,instance_nearest(x,y,oTarget).x,instance_nearest(x,y,oTarget).y, oBlock,false,true){
            target = instance_nearest(x,y,oTarget);
        }else{
            target = instance_nth_nearest(x,y,oTarget,5);
        }
    }
    
    if instance_exists(target){
        if ((target.bbox_right &gt;= view_xview[global.myView]+120) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + view_wview[global.myView]) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + view_hview[global.myView]) &amp;&amp; dir == 1){
            if (!collision_line(x, y, target.x, target.y, oBlock, false, true)){
                if shoot{
                    isShooting = true;
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = y + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                        break;
                        }
                    }
                    height = sin(random(1));
    
                    // take damage          
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
                
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                    target = noone;
                }
            }
           else target = noone;
    
        }else if ((target.bbox_right &gt; view_xview[global.myView]) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 120) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + view_hview[global.myView]) &amp;&amp; dir == -1)
            {
            if (!collision_line(x, y, target.x, target.y, oBlock, false, true))
                {
                if shoot{
                    isShooting = true;
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = y + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                            break;
                        }
                    }
    
                    // take damage
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
    
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                    target = noone;
                }
           }
        else target = noone;
        }
    else target = noone;
    }else target = noone;
    
    if target == noone{
        if shoot{
            isShooting = true;
            global.hp -= .020;
            direction = point_direction(x,y, view_xview[global.myView]+180*dir, y-4);
            max_length = 180;
    
            for(i = 0; i &lt; max_length; i+=1){
                lx = x + lengthdir_x(i, direction);
                ly = y + lengthdir_y(i, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
        }else{
            isShooting = false;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lose o2/hp in water
if global.gameMove{
    if underWater{
        air -= .06;
    }else{
        air = 100;
    }
    
    if air &lt; 0 {
        global.hp -= .5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Push Block
if global.gameMove{
    instRight = instance_place(x + 2,y,oPush);
    instLeft = instance_place(x - 2,y,oPush);
    
    if instRight != noone{
        if right and big{
            with instRight{
                if place_empty(x + 2,y){
                    x += 2;
                }
            }
        }
    }else if instLeft != noone{
        if left and big{
            with instLeft{
                if place_empty(x - 2,y){
                    x -= 2;
                }        
            }
        }
    }
    
    // Move with block on conveyor belt
    if place_meeting(x,y+1,oPush){
        x += oPush.hspeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose Sprite &amp; blend
if global.gameMove{
    if status == "stand"{
       spr = sHoward_stand;
    }else if status == "run"{
       spr = sHoward_run;
    }else if status == "in_air"{
        if jumpBoots{
            spr = sHoward_jump_jet;
        }else{
            spr = sHoward_jet;
        }
    }

// flashing player colors (based on status_blend)
    if status_blend == "normal"{
        blend = c_white;
    }else if status_blend == "shield"{
        blend = choose(c_lime, c_aqua, c_blue);
    }else if status_blend == "zap"{
        blend = choose(c_blue, c_white, c_gray, c_aqua);
    }else if status_blend == "hurt"{
        blend = choose(c_red, c_white);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Things

// toggle debug
if debugKey{
    if !global.debug{
        global.debug = true;
    }else{
        global.debug = false;
    }
}

if global.debug{
    global.hp = 100;
    hasTrans = true;
    jumpHeight = 999;
    
    // test chatter
    if talkKey{
        if talk == ""{
            talk = choose(
                "Sup, I'm Howard",
                "Poopy",
                "I dont give a hoot",
                "YEAUUH"
            )
            alarm[2] = 100;
        }
    }
    
    // insta win
    if keyboard_check_pressed(ord('W')){
        if room == rm_1 {room_goto(rm_win);}
        else if room == rm_2 {room_goto(rm_win2);}
        else if room == rm_3 {room_goto(rm_win3);}
    }
    
    // restart game
    if keyboard_check_pressed(ord('R')){
        sound_stop_all();
        game_restart();  
    }
}else{  
    if jumpBoots{
        jumpHeight = 100;
    }else{
        jumpHeight = 52;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oJump">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Jump Boots
hasTrans = true;
jumpHeight = 100;
jumpBoots = true;

talk = "Jump Boost!";
alarm[2] = 100;

with other{
     instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oShrink">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Shrinker
hasTrans = true;

talk = "Shrink!"
alarm[2] = 100;

with other{
     score += 500;
     instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oNext">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goto target room
room_goto(oNext.level);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Player Height
if big{
   playerHeight = y;
}else{
   playerHeight = y + 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw shit
draw_sprite_ext(spr, image_index, x, y, sizex*dir, sizey, image_angle, blend, image_alpha );

// laser
if isShooting &amp;&amp; global.gameMove{
    // pulse laser code: thanks to reddit users [FmMan3] and [oldmankc]
    height = sin(random(1));
    draw_set_color(c_blue);
    draw_line_width(x, playerHeight-5, lx,ly, (height * 4) + 0.1);
    draw_set_color(c_aqua);
    draw_line_width(x, playerHeight-5, lx,ly, (height * 1) + 0.1);
    draw_set_color(c_white);
    draw_line_width(x, playerHeight-5, lx,ly, (height * 1) + 0.1);
}else{}

// Draw chatter
draw_set_color(c_white);
draw_set_font(fnt_system);
draw_set_halign(fa_middle);
draw_text(x,playerHeight-24,talk);

// pause
if pause &amp;&amp; !global.gameMove{
    draw_sprite_ext(sPause,0,view_xview[global.myView],view_yview[global.myView],240,136,image_angle,image_blend,image_alpha);
}

// debig
if global.debug{
    draw_sprite_ext(mask_index,0,x,y,1,1,0,c_aqua,0.5);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myRoom = get_string("Enter room name: ","rm_1");
room_goto(asset_get_index(myRoom));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
