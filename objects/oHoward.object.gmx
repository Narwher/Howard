<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHoward_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The Creation
jumpCount = 0; 
jumpHeight = 52; //Modify for phun tymes

isJumping = false; 
isFalling = false;

status = "stand"; //"stand", "run", "in_air"

dir = 1; //-1 == left, 1 == right
spr = ""; 
blend = c_white 
image_speed = .18;

global.hp = 100;
global.shp = 100;
shieldOn = false;
hasTrans = false; //if Howard has picked up Transform object (oShrink)

big = true;
sizex = 1; 
sizey = 1; 

alarm[1] = 1 //begin instance clear

talk = "";
var inWater; 

targetList = ds_list_create(); // empty target list (for shooting)

global.debug = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create HUD etc.
instance_create(0,0, oHud);

// Create joystick HUD
if global.touch{
    instance_create(view_xview[0] + 32, view_yview[0] + 90, oAnalog);
    instance_create(view_xview[0] + 32, view_yview[0] + 90, oAnalogBack); 
    instance_create(view_xview[0] + 176, view_yview[0] + 90, oShieldTouch);
    instance_create(view_xview[0] + 208, view_yview[0] + 90, oShootTouch);
    instance_create(view_xview[0] + 192, view_yview[0] + 58, oShrinkTouch);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset talk 
talk = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OOB Instance Deactivation 
// Thanks Yaru

// deactivate all instances
instance_deactivate_all(true);

// activate all terrain 
instance_activate_object(oBlock);
instance_deactivate_object(oPush);
instance_deactivate_object(oHplat);
instance_deactivate_object(oVplat);

// then deactivate terrains outside 'terrain graze region'
instance_deactivate_region(view_xview[0]-32,view_yview[0]-32,
(view_xview[0] + (view_wview[0] + 64)),(view_yview[0] + (view_hview[0] + 64)),false,true);

// activate all objects inside 'object graze border' (which is smaller than terrain one) 
instance_activate_region(view_xview[0]-8,view_yview[0]-8,
(view_xview[0] + (view_wview[0]+16)),(view_yview[0] + (view_hview[0] + 16)),true);
instance_activate_object(oHud);
instance_activate_object(oAnalog);
instance_activate_object(oAnalogBack);

alarm[1] = 2; // re-execute


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shield deplete countdown

if global.shp &gt; 0{
   global.shp -= .075;
   alarm[0] = 1;
}else{
   alarm[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define Input

if global.joykeys{
    gamepad_set_axis_deadzone(0, 0.5);
    
    left = keyboard_check(vk_left) || gamepad_button_check(0,gp_padl) || (gamepad_axis_value(0, gp_axislh) &lt; 0);
    right = keyboard_check(vk_right) || gamepad_button_check(0,gp_padr) || (gamepad_axis_value(0, gp_axislh) &gt; 0);
    down = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0,gp_padd) || (gamepad_axis_value(0, gp_axislv) &gt; 0);
    jump = keyboard_check(vk_up) || gamepad_button_check(0,gp_padu) || (gamepad_axis_value(0, gp_axislv) &lt; 0);
    
    shoot = keyboard_check(vk_space) || gamepad_button_check(0,gp_face2);
    shrink = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0,gp_face3) || gamepad_button_check_pressed(0,gp_padd);
    shield = keyboard_check_pressed(ord('Z')) || gamepad_button_check_pressed(0,gp_face1);
}else if global.touch{
    left = oAnalog.x &lt; oAnalogBack.x - oAnalog.deadzone;
    right = oAnalog.x &gt; oAnalogBack.x + oAnalog.deadzone;
    down = oAnalog.y &gt; oAnalogBack.y + oAnalog.deadzone;
    jump = oAnalog.y &lt; oAnalogBack.y - oAnalog.deadzone;
    
    shoot = (device_mouse_check_button(0, mb_left) || device_mouse_check_button(1, mb_left)) &amp;&amp; (collision_point(device_mouse_x(0), device_mouse_y(0), oShootTouch, true, false) || (collision_point(device_mouse_x(1), device_mouse_y(1), oShootTouch, true, false)));
    shrink = (device_mouse_check_button_pressed(0, mb_left)  || device_mouse_check_button(1, mb_left)) &amp;&amp; (collision_point(device_mouse_x(0), device_mouse_y(0), oShrinkTouch, true, false) || (collision_point(device_mouse_x(0), device_mouse_y(0), oShrinkTouch, true, false))) &amp;&amp; oShrinkTouch.visible == true;
    shield = (device_mouse_check_button_pressed(0, mb_left) || device_mouse_check_button(1, mb_left)) &amp;&amp; (collision_point(device_mouse_x(0), device_mouse_y(0), oShieldTouch, true, false) || (collision_point(device_mouse_x(0), device_mouse_y(0), oShieldTouch, true, false))) &amp;&amp; oShieldTouch.visible == true;
}

debugKey = keyboard_check_pressed(ord('D')) || gamepad_button_check_pressed(0,gp_select);
talkKey = keyboard_check_pressed(ord('A')) || gamepad_button_check_pressed(0,gp_face4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// States
inWater = place_meeting(x,y,oWater); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if !inWater{
    if left{
        dir = -1; 
        if place_free(x - 2,y){
            status = "run";
            x -= 2;
        }else{
            status = "stand";
        }
    }else if right{
        dir = 1; 
        if place_free(x + 2,y){
            status = "run";
            x += 2;
        }else{
            status = "stand";
        }
    }else{
        status = "stand";
    }
    
    // "Gravity"
    if place_free(x,y + 2){
        status = "in_air";
        if isFalling{
            y += 2;
        }
    }else{
        if !place_meeting(x, y + 2,oPush){
            move_contact_solid(270,-1);
        }
        
        isFalling = false;
        jumpCount = 0;
    }
    
    
    if jump{
        if (jumpCount &lt; jumpHeight){
            if !isFalling{
                if place_free (x, y - 2){
                    y -= 2;
                }
                jumpCount +=1;
            }
        }else{
            isFalling = true;
        }
    }else{
        isFalling = true;
    }
}else{
    if left{
        dir = -1; 
        if place_free(x - 1,y){
            status = "run";
            x -= 1;
        }else{
            status = "stand";
        }
    }else if right{
        dir = 1; 
        if place_free(x + 1,y){
            status = "run";
            x += 1;
        }else{
            status = "stand";
        }
    }else{
        status = "stand";
    }
    
    if place_free(x,y + 1){
        status = "in_air";
        if isFalling{
            y += 1;
        }
    }else{
        if !place_meeting(x, y + 2,oPush){
            move_contact_solid(270,-1);
        }
        
        isFalling = false;
        jumpCount = 0;
    }
    
    
    if jump{
        if (jumpCount &lt; jumpHeight){
            if !isFalling{
                if place_free (x, y - 1){
                    y -= 1;
                }
                jumpCount +=.5;
            }
        }else{
            isFalling = true;
        }
    }else{
        isFalling = true;
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose Sprite
if status == "stand"{
   spr = sHoward_stand;
}else if status == "run"{
   spr = sHoward_run;
}else if status == "in_air"{
   spr = sHoward_jet;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with Stuff
// (copy and paste for each stuff:^| )


//-----------------------------------------------//
// Emoji
if place_meeting(x,y,oSmiley){
   if !shieldOn{
      global.hp = global.hp - oSmiley.damage;
      blend = choose(c_red, c_white);
   }else{
      global.shp = global.shp - oSmiley.damage;
      global.hp = global.hp - 0.20;
   }
}else{
   if !shieldOn{
      blend = c_white;
   }
}

//-----------------------------------------------//
// Imp
if place_meeting(x,y,oImp) &amp;&amp; oImp.state == "attack"{
    if !shieldOn{
        global.hp = global.hp - oImp.damage;
        blend = choose(c_red, c_white);
    }else{
        global.shp = global.shp - oImp.damage;
        global.hp = global.hp - 0.20;
    }
}else{
    if !shieldOn{
        blend = c_white;
    }
}

//  Walk on top of enemy
if place_meeting(x, y + 2,oImp){
    isFalling = false;
    jumpCount = 0;
    status = "stand";
}

//-----------------------------------------------//
// Lava
if place_meeting(x, y + 1,oLava){
    if !shieldOn{
        global.hp -= .15;
        blend = choose(c_red, c_white);
    }else{
        global.shp = global.shp - 1;
    }
}else{
    if !shieldOn &amp;&amp; !place_meeting(x,y,oElecFence){
        blend = c_white;
    }
}

//-----------------------------------------------//
// Conveyor Belts
if place_meeting(x,y + 1,oConveyorRight) &amp;&amp; place_empty(x + 2,y){
    // sometimes life is easy
    x += 1;
}

if place_meeting(x,y + 1,oConveyorLeft) &amp;&amp; place_empty(x - 2,y){
    x -= 1;
}

//-----------------------------------------------//
// Electric Fence
if instance_exists(oElecFence)
&amp;&amp; collision_rectangle(oElecFence.bbox_left - 32, oElecFence.bbox_top, oElecFence.bbox_right + 32, oElecFence.bbox_bottom,oHoward,false,false){
    if !shieldOn{
        global.hp -= .15;
        blend = choose(c_blue, c_white, c_gray, c_aqua);
    }else{
        global.shp = global.shp - 1;
    }
}else{
    if !shieldOn &amp;&amp; !place_meeting(x,y,oLava){
        blend = c_white;
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over
if global.hp &lt;= 0 {
   room_goto(rm_gameover);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shield
if shield{
   if !shieldOn &amp;&amp; global.hp &gt; 20{
       global.hp -= 10; // uses energy
       score -= 100;
       shieldOn = true;
       alarm[0] = 1; // calls alarm 0, starting shield timer
   }else if shieldOn &amp;&amp; global.hp &gt; 20 &amp;&amp; global.shp &lt; 20 {
       global.hp -= 10;
       score -= 100;
       global.shp = 100;
       alarm[0] = 1;
   }
}

// test shield health
if global.shp &lt;= 0{
   shieldOn = false;
   global.shp = 100;
}

// change character color
if shieldOn{
   blend = choose(c_lime, c_aqua, c_blue);
}else{
   // whatever man
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shrink
if shrink{
   if hasTrans{
      if big{
         big = false;
      }else{
         if place_free(x,y-8){
            y -=4 ;
            big = true;
         }
      }
   // this is a comment
   }
}


// size checks
if big{
   mask_index = sBig_mask;
   sizex = 1;
   sizey = 1;
}else{
   mask_index = sSmall_mask;
   sizex = 0.5;
   sizey = 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot (rework)
/*
if shoot{
    isShooting = true;
    max_length = 180;
    
    global.hp -= .020;    

    if instance_exists(oTarget){
        // if target is detected (unobstructed) in view, add to target list
        with (oTarget){
            if ((bbox_right &gt;= view_xview[0]+120) &amp;&amp; (bbox_left &lt; view_xview[0] + view_wview[0]) &amp;&amp; (bbox_bottom &gt; view_yview[0]) &amp;&amp; (bbox_top &lt; view_yview[0] + view_hview[0]) &amp;&amp; oHoward.dir == 1)
            &amp;&amp; (!collision_line(x, y, oHoward.x, oHoward.y, oBlock, false, true)){
                ds_list_add(oHoward.targetList, id);
            }
        }
        
        if (ds_list_size(targetList) &gt; 1){
            // loop through targets and shoot them!
            for (i = 0; i &lt; ds_list_size(targetList); i++){
                myTarget = targetList[| i];
                direction = point_direction(x, y, myTarget.x, myTarget.y);

                for(j = 0; j &lt; max_length; j++){
                    lx = x + lengthdir_x(i, direction);
                    ly = y + lengthdir_y(i, direction);
                    if(collision_point(lx, ly, oBlock, false, true))
                    or(collision_point(lx, ly, oTarget, false, true)){
                        break;
                    }
                }
                height = sin(random(1));

                // target take damage          
                with (myTarget){
                     hp -= 1;
                     image_blend = choose(c_red,c_white);
                }   
                
                //ds_list_delete(targetList, i); 
            }          
        }
    }else{
        // shoot straight forward if no target present
        direction = point_direction(x,y, view_xview[0]+180*dir, y-4);

        for(i = 0; i &lt; max_length; i += 1){
            lx = x + lengthdir_x(i, direction);
            ly = y + lengthdir_y(i, direction);
            if(collision_point(lx, ly, oBlock, false, true))
            or(collision_point(lx, ly, oTarget, false, true)){
                break;
            }
        }
    }
}else{
    isShooting = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot (old one)
if instance_exists(oTarget){
    if !collision_line(x,y,instance_nearest(x,y,oTarget).x,instance_nearest(x,y,oTarget).y, oBlock,false,true){
        target = instance_nearest(x,y,oTarget);
    }else{
        target = instance_nth_nearest(x,y,oTarget,5);
    }
}

if instance_exists(target){
    if ((target.bbox_right &gt;= view_xview[0]+120) &amp;&amp; (target.bbox_left &lt; view_xview[0] + view_wview[0]) &amp;&amp; (target.bbox_bottom &gt; view_yview[0]) &amp;&amp; (target.bbox_top &lt; view_yview[0] + view_hview[0]) &amp;&amp; dir == 1){
        if (!collision_line(x, y, target.x, target.y, oBlock, false, true)){
            if shoot{
                isShooting = true;
                global.hp -= .020;
                direction = point_direction(x,y, target.x, target.y);
                max_length = 180;

                for(i = 0; i &lt; max_length; i+=1){
                    lx = x + lengthdir_x(i, direction);
                    ly = y + lengthdir_y(i, direction);
                    if(collision_point(lx, ly, oBlock, false, true))
                    or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                    }
                }
                height = sin(random(1));

                // take damage          
                with (target){
                     hp -=1;
                     image_blend = choose(c_red,c_white);
                }
            
            }else{
                isShooting = false;
                with (target){
                    image_blend = c_white;
                }
                target = noone;
            }
        }
       else target = noone;

    }else if ((target.bbox_right &gt; view_xview[0]) &amp;&amp; (target.bbox_left &lt; view_xview[0] + 120) &amp;&amp; (target.bbox_bottom &gt; view_yview[0]) &amp;&amp; (target.bbox_top &lt; view_yview[0] + view_hview[0]) &amp;&amp; dir == -1)
        {
        if (!collision_line(x, y, target.x, target.y, oBlock, false, true))
            {
            if shoot{
                isShooting = true;
                global.hp -= .020;
                direction = point_direction(x,y, target.x, target.y);
                max_length = 180;

                for(i = 0; i &lt; max_length; i+=1){
                    lx = x + lengthdir_x(i, direction);
                    ly = y + lengthdir_y(i, direction);
                    if(collision_point(lx, ly, oBlock, false, true))
                    or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                    }
                }

                // take damage
                with (target){
                     hp -=1;
                     image_blend = choose(c_red,c_white);
                }

            }else{
                isShooting = false;
                with (target){
                    image_blend = c_white;
                }
                target = noone;
            }
       }
    else target = noone;
    }
else target = noone;
}else target = noone;

if target == noone{
    if shoot{
        isShooting = true;
        global.hp -= .020;
        direction = point_direction(x,y, view_xview[0]+180*dir, y-4);
        max_length = 180;

        for(i = 0; i &lt; max_length; i+=1){
            lx = x + lengthdir_x(i, direction);
            ly = y + lengthdir_y(i, direction);
            if(collision_point(lx, ly, oBlock, false, true))
            or(collision_point(lx, ly, oTarget, false, true)){
            break;
            }
        }
    }else{
        isShooting = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Push Block

instRight = instance_place(x + 2,y,oPush);
instLeft = instance_place(x - 2,y,oPush);

if instRight != noone{
    if right and big{
        with instRight{
            if place_empty(x + 2,y){
                x += 2;
            }
        }
    }
}else if instLeft != noone{
    if left and big{
        with instLeft{
            if place_empty(x - 2,y){
                x -= 2;
            }        
        }
    }
}

// Move with block on conveyor belt
if place_meeting(x,y+1,oPush){
    x += oPush.hspeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Things

// toggle debug
if debugKey{
    if !global.debug{
        global.debug = true;
    }else{
        global.debug = false;
    }
}

if global.debug{
    global.hp = 100;
    hasTrans = true;
    jumpHeight = 999;
    
    // test chatter
    if talkKey{
        if talk == ""{
            talk = choose(
                "Sup, I'm Howard",
                "Poopy",
                "I dont give a hoot",
                "YEAUUH"
            )
            alarm[2] = 100;
        }
    }
    
    // insta win
    if keyboard_check_pressed(ord('W')){
        room_goto(rm_win);
    }
    
    // restart game
    if keyboard_check_pressed(ord('R')){
        sound_stop_all();
        game_restart();  
    }
}else{
    jumpHeight = 52;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oShrink">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Shrinker
hasTrans = true;
with other{
     score += 500;
     instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oNext">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goto target room
room_goto(rm_win);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Player Height
if big{
   playerHeight = y;
}else{
   playerHeight = y + 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw shit
draw_sprite_ext(spr, image_index, x, y, sizex*dir, sizey, image_angle, blend, image_alpha );

// laser
if isShooting{
    // pulse laser code: thanks to reddit users [FmMan3] and [oldmankc]
    height = sin(random(1));
    draw_set_color(c_blue);
    draw_line_width(x, playerHeight-5, lx,ly, (height * 4) + 0.1);
    draw_set_color(c_aqua);
    draw_line_width(x, playerHeight-5, lx,ly, (height * 1) + 0.1);
    draw_set_color(c_white);
    draw_line_width(x, playerHeight-5, lx,ly, (height * 1) + 0.1);
}else{}

// Draw chatter
draw_set_color(c_white);
draw_set_font(fnt_system);
draw_set_halign(fa_middle);
draw_text(x,playerHeight-24,talk);

// debig
if global.debug{
    draw_sprite_ext(mask_index,0,x,y,1,1,0,c_aqua,0.5);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
