<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHoward_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init 
jumpCount = 0; 
jumpHeight = 52; // Modify for phun tymes
jumpBoots = false;

isJumping = false; 
isFalling = false;

global.hp = global.curHp;
status = "stand"; // "stand", "run", "in_air" "dead"
status_blend = "normal" // "normal", "shield", "zap", "hurt" use for flashing player
char = global.char // "how" - howard, "troop" - alien trooper, "gumi" - drawoh NPC

dir = 1; // -1 = left, 1 = right
spr = sHoward_stand;
if char == "how" {sprite_index = sHoward_stand}else if char == "troop" {sprite_index = sTrooper}else if char == "gumi" {sprite_index = sNPC} 
blend = c_white 
image_speed = .18;

global.shp = 100;
shieldOn = false;
hasTrans = false; // if Howard has picked up Transform object (oShrink)
shoot = false;
isShooting = false;

big = true;
sizex = 1; 
sizey = 1; 

alarm[1] = 1 // begin instance clear

talk = "";
alarm[2] = 2 // talk

underWater = false;
air = 100;

targetList = ds_list_create(); // empty target list (for shooting (old))
pause = false;
target = noone

alarm[3] = 1 // stuff

talking = false
msgCount = 0
msgMax = choose(100,125,200,200,225,300,500)
alarm[4] = 1;

//rm1 music toggle
if room == rm_1 {alarm[5] = 1;}

i = 0 // for shooting


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create HUD etc.
instance_create(0,0, oHud);

// Create joystick HUD
if global.touch{
    instance_create(view_xview[global.myView] + 32,view_yview[global.myView] + 90, oAnalog);
    instance_create(view_xview[global.myView] + 32,view_yview[global.myView] + 90, oAnalogBack); 
    instance_create(32,90, oAnalog);
    instance_create(32,90, oAnalogBack);
    instance_create(0, 0, oShieldTouch);
    instance_create(view_xview[global.myView] + 152, view_yview[global.myView] + 74, oShootTouch);
    instance_create(0, 0, oShrinkTouch);
    
    touch1 = virtual_key_add(216*4,88*4, 64, 64, vk_space);
    touch2 = virtual_key_add(192*4, 46*4, 64, 64, ord('X'));
    touch3 = virtual_key_add(170*4, 88*4, 64, 64, ord('Z'));
    
    //virtual_key_show(touch1);
    //virtual_key_show(touch2);
    //virtual_key_show(touch3);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rm_1{
    if !audio_is_playing(bgm_terra) &amp;&amp; !audio_is_playing(bgm_ending){
        audio_stop_all();
        audio_play_sound(bgm_terra,1,1);
    }
    
    alarm[5] = 5;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shoot chatter
if talking &amp;&amp; talk == ""{
    talk = choose("Eat this!","Ha Ha!!", "I'm a firing my layzah!", "Zap!", "Yee Haw!" ,"Roast 'em!", "Yipee ky yay!", "Take this!", "Hot stuff!", "Lazer attack!!")
    msgCount = 0
    msgMax = choose(100,125,200,200,225,300,400)
    alarm[2] = 100;
    talking = false
}else{

}

alarm[4] = 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sounds
if global.gameMove{
    if shoot{
        audio_play_sound(snd_shoot,1,0)
    }
}

alarm[3] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset talk 
talk = "";
talking = false;

global.gameMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OOB Instance Deactivation 
if global.gameMove || global.debug{
    // deactivate all instances (except hud &amp; persistent objects)
    instance_deactivate_all(true);
    instance_activate_object(oHud);
    instance_activate_object(oAnalog);
    instance_activate_object(oAnalogBack);
    instance_activate_object(oShieldTouch);
    instance_activate_object(oShrinkTouch);
    instance_activate_object(oShootTouch);
    instance_activate_object(oBlockedBlock);
    
    // then activate terrain region
    instance_activate_region(view_xview[global.myView]-64,view_yview[global.myView]-64, //96
    view_wview[global.myView] + 96,view_hview[global.myView] + 96,true); //192
    
    // deactivate any object than could possibly fall/move thru ground/walls
    instance_deactivate_object(oNPC);
    instance_deactivate_object(oSmiley);
    instance_deactivate_object(oImp);
    instance_deactivate_object(oTrooper);
    instance_deactivate_object(oBirb);
    //instance_deactivate_object(oPush);
    instance_deactivate_object(oHplat);
    instance_deactivate_object(oVplat);
   // instance_deactivate_object(oMine);
    instance_deactivate_object(oElecFence);
    instance_deactivate_object(oGhoul);
    //instance_deactivate_object(oBreak);
    instance_deactivate_object(oWater);
    instance_deactivate_object(oIce);
    instance_deactivate_object(oRust);
    instance_deactivate_object(oMcChicken);
    instance_deactivate_object(oLazerHor);
    instance_deactivate_object(oLazerVert);
    instance_deactivate_object(oTurret);
    instance_deactivate_object(oSign);
    
    
    // activate all objects inside 'object graze border' (which is smaller than terrain one) 
    instance_activate_region(view_xview[global.myView]-8,view_yview[global.myView]-8, //32 
    view_wview[global.myView] + 16,view_hview[global.myView] + 16,true); //64
}

alarm[1] = 4; // re-execute


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shield deplete countdown
if global.gameMove{
    if global.shp &gt; 0{
       global.shp -= .075;
       alarm[0] = 1;
    }else{
       alarm[0] = 0;
    }
}
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define Input

if global.joykeys{
    gamepad_set_axis_deadzone(0, 0.5);
    
    left = keyboard_check(vk_left) || gamepad_button_check(0,gp_padl) || (gamepad_axis_value(0, gp_axislh) &lt; 0) || keyboard_check(ord('A')) || keyboard_check(vk_numpad4);
    right = keyboard_check(vk_right) || gamepad_button_check(0,gp_padr) || (gamepad_axis_value(0, gp_axislh) &gt; 0) || keyboard_check(ord('D')) || keyboard_check(vk_numpad6);
    down = keyboard_check_pressed(vk_down) || gamepad_button_check_pressed(0,gp_padd) || (gamepad_axis_value(0, gp_axislv) &gt; 0) || keyboard_check(ord('S')) || keyboard_check(vk_numpad2);
    jump = keyboard_check(vk_up) || gamepad_button_check(0,gp_padu) || (gamepad_axis_value(0, gp_axislv) &lt; 0) || keyboard_check(ord('W')) || keyboard_check(vk_numpad8);
    down_dbg = keyboard_check(vk_down) || gamepad_button_check(0,gp_padd) || (gamepad_axis_value(0, gp_axislv) &gt; 0) || keyboard_check(ord('S')) || keyboard_check(vk_numpad2);
    
    //num
    if keyboard_check(vk_numpad7) || keyboard_check(vk_home){ left = 1; jump = 1;} 
    else if keyboard_check(vk_numpad9) || keyboard_check(vk_pageup){ jump = 1; right = 1;}
    else if keyboard_check(vk_numpad1) || keyboard_check(vk_end) {left = 1; down = 1;}
    else if keyboard_check(vk_numpad3) || keyboard_check(vk_pagedown) {down = 1; right = 1;}   
    
    shoot = keyboard_check(vk_space) || gamepad_button_check(0,gp_face2);
    shoot_release = keyboard_check_released(vk_space) || gamepad_button_check_released(0,gp_face2);
    shrink = keyboard_check_pressed(ord('X')) || gamepad_button_check_pressed(0,gp_face3) || keyboard_check_pressed(ord('Q')) ;
    shield = keyboard_check_pressed(ord('Z')) || gamepad_button_check_pressed(0,gp_face1) || keyboard_check_pressed(ord('E'));
    start = keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0,gp_start);
}else if global.touch{
    left = oAnalog.x &lt; oAnalogBack.x - oAnalog.deadzone;
    right = oAnalog.x &gt; oAnalogBack.x + oAnalog.deadzone;
    down = oAnalog.y &gt; oAnalogBack.y + oAnalog.deadzone;
    jump = oAnalog.y &lt; oAnalogBack.y - oAnalog.deadzone;
    
    shoot =  keyboard_check(vk_space);
    shoot_release = keyboard_check_released(vk_space)
    shrink = keyboard_check_pressed(ord('X'))  //&amp;&amp; oShrinkTouch.visible;
    shield = keyboard_check_pressed(ord('Z')) //&amp;&amp; oShieldTouch.visible;
}

killKey = gamepad_button_check_pressed(0,gp_select)
debugKey = keyboard_check_pressed(vk_f3) &amp;&amp; keyboard_check(vk_control) //|| gamepad_button_check_pressed(0,gp_face4);
talkKey = keyboard_check_pressed(ord('A')) 

vitaSkipLevel =  gamepad_button_check(0,gp_shoulderl) &amp;&amp; gamepad_button_check(0,gp_shoulderr)  &amp;&amp; gamepad_button_check_pressed(0,gp_start) 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// View movement (non locking to borders)
view_xview[global.myView] = x - view_wview[global.myView]/2;
view_yview[global.myView] = y - view_hview[global.myView]/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// States and health
underWater = place_meeting(x,y,oWater); 

if global.hp &gt; 100 global.hp = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if global.gameMove{
    if !underWater{
        if left{
            dir = -1; 
            if place_free(x - 2,y){
                status = "run";
                x -= 2;
            }else{
                status = "stand";
            }
        }else if right{
            dir = 1; 
            if place_free(x + 2,y){
                status = "run";
                x += 2;
            }else{
                status = "stand";
            }
        }else{
            status = "stand";
        }
        
        // "Gravity"
        if place_free(x,y + 2){
            if isFalling{
                status = "fall";
                y += 2;
            }
        }else{
            if !place_meeting(x, y + 2,oPush){
                move_contact_solid(270,-1);
            }
            
            isFalling = false;
            jumpCount = 0;
        }
        
        
        if jump{
            if (jumpCount &lt; jumpHeight){
                if !isFalling{
                    if place_free (x, y - 2){
                        status = "jump";
                        y -= 2;
                    //}else{
                        //isFalling = true;
                    }
                    status = "jump";
                    jumpCount +=1;
                }
            }else{
                isFalling = true;
            }
        }else{
            isFalling = true;
        }
    }else{
        if left{
            dir = -1; 
            if place_free(x - 1,y){
                status = "run";
                x -= 1;
            }else{
                status = "stand";
            }
        }else if right{
            dir = 1; 
            if place_free(x + 1,y){
                status = "run";
                x += 1;
            }else{
                status = "stand";
            }
        }else{
            status = "stand";
        }
        
        if place_free(x,y + 1){
            status = "in_air";
            if isFalling{
                y += 1;
            }
        }else{
            if !place_meeting(x, y + 2,oPush){
                move_contact_solid(270,-1);
            }
            
            isFalling = false;
            jumpCount = 0;
        }
        
        
        if jump{
            if (jumpCount &lt; jumpHeight){
                if !isFalling{
                    if place_free (x, y - 1){
                        y -= 1;
                    }
                    jumpCount +=.5;
                }
            }else{
                isFalling = true;
            }
        }else{
            isFalling = true;
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ice stuff
if global.gameMove{
    if place_meeting(x,y + 2, oIce){
        if left &amp;&amp; place_empty(x - 2,y){
            if hspeed &gt; -1{
                hspeed -= .1; 
            }
        }else if right &amp;&amp; place_empty(x + 2,y){
            if hspeed &lt; 1{
                hspeed += .1;
            }   
        }else{
            if hspeed &lt; -0.01 &amp;&amp; place_empty(x - 2,y){
                hspeed += .0025;
            }else if hspeed &gt; 0.01 &amp;&amp; place_empty(x + 2,y){
                hspeed -= .0025; 
            }else if hspeed = 0{
                if place_empty(x + 2,y) &amp;&amp; place_empty(x - 2,y) {
                    hspeed = choose(.85,-.85)
                }else{
                    hspeed = 0;
                }
            }         
        }
        if !place_empty(x + sign(2),y){
            hspeed = 0;
        }
        y = round(y/1) * 1;
     }else{
        x = round(x/1) * 1;
        y = round(y/1) * 1;
        hspeed = 0;
        vspeed = 0;
    }
}else{
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over
if global.hp &lt;= 0 {
   global.gameMove = false;
   instance_create(x,y,oHoward_die);
   instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause game
if (global.joykeys &amp;&amp; start) &amp;&amp; !instance_exists(oTransportEvent)&amp;&amp; !instance_exists(oScriptedTransport){
    if global.gameMove{
        global.gameMove = false;
        talk = "Game Paused.";
        pause = true;
        audio_play_sound(snd_pause,1,0);
    }else{
        global.gameMove = true;
        talk = "";
        pause = false;
        audio_play_sound(snd_unpause,1,0);
    }
}

if !global.gameMove{
    image_speed = 0;
}else{
    image_speed = .15;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shield
if global.gameMove{
    if shield{
       if !shieldOn &amp;&amp; global.hp &gt; 20{
           global.hp -= 10; // uses energy
           global.shp = 100;
           shieldOn = true;
           alarm[0] = 1; // calls alarm 0, starting shield timer
       }else if shieldOn &amp;&amp; global.hp &gt; 20 &amp;&amp; global.shp &lt; 20 {
           global.hp -= 10;
           score -= 100;
           global.shp = 100;
           alarm[0] = 1;
       }
    }
    
    // test shield health
    if global.shp &lt;= 0{
       shieldOn = false;
       global.shp = 100;
    }
    
    // change character color
    if shieldOn{
       status_blend = "shield";
    }else{
       // whatever man
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shrink
if global.gameMove{
    if shrink{
       if hasTrans{
          if big{
             big = false;
          }else{
             if place_free(x,y-8){
                y -= 4;
                big = true;
             }
          }
       // this is a comment
       }
    }
    
    
    // size checks
    if big{
       mask_index = sBig_mask;
       sizex = 1;
       sizey = 1;
    }else{
       mask_index = sSmall_mask;
       sizex = 0.5;
       sizey = 0.5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with Stuff
// (copy and paste for each stuff:^| )

if global.gameMove{

//-----------------------------------------------//
// Emoji
if place_meeting(x,y,oSmiley){
   if !shieldOn{
      global.hp = global.hp - oSmiley.damage;
      status_blend = "hurt";
   }else{
      global.shp = global.shp - oSmiley.damage;
      //global.hp = global.hp - 0.10;
   }
}else{
   if !shieldOn{
      status_blend = "normal";
   }
}

//-----------------------------------------------//
// Imp
if place_meeting(x,y,oImp) {//&amp;&amp; oImp.state == "attack"{
    if !shieldOn{
        global.hp = global.hp - oImp.damage;
        status_blend = "hurt";
    }else{
        global.shp = global.shp - oImp.damage;
        //global.hp = global.hp - 0.10;
    }
}else{
    if !shieldOn{
        status_blend = "normal"
    }
}

//  Walk on top of enemy
if place_meeting(x, y + 2,oImp){
    isFalling = false;
    jumpCount = 0;
    status = "stand";
    status_blend = "normal";
}

// Move when standing on Imp
if place_meeting(x,y+2, oImp){
    instance = instance_place(x,y+2,oImp);
    if instance.hspeed &gt; 0 &amp;&amp; place_free (x+2,y){
        x += instance.hspeed ;
    }else if instance.hspeed &lt; 0 &amp;&amp; place_free(x-2,y){
        x += instance.hspeed;
    }
}

//-----------------------------------------------//
// Lava
if place_meeting(x, y + 2,oLava){
    if !shieldOn{
        global.hp -= .4;
        status_blend = "hurt";
    }else{
        global.shp = global.shp - 1;
        //global.hp = global.hp - 0.10;
    }
}else{
    if !shieldOn{
        status_blend = "normal";
    }
}

//-----------------------------------------------//
// Conveyor Belts
if place_meeting(x,y + 1,oConveyorRight) &amp;&amp; place_free(x + 2,y){
    // sometimes life is easy
    x += 1;
}

if place_meeting(x,y + 1,oConveyorLeft) &amp;&amp; place_free(x - 2,y){
    x -= 1;
}


//-----------------------------------------------//
// Bullets
if place_meeting(x,y,oBullet){
   if !shieldOn{
      global.hp = global.hp - oBullet.damage;
      status_blend = "hurt";
   }else{
      global.shp = global.shp - oBullet.damage;
      //global.hp = global.hp - 0.10;
   }
}else{
   if !shieldOn{
      status_blend = "normal";
   }
}

//-----------------------------------------------//
// Birb
if place_meeting(x,y,oBirb){
   if !shieldOn{
      global.hp = global.hp - oBirb.damage;
      status_blend = "hurt";
   }else{
      global.shp = global.shp - oBirb.damage;
      //global.hp = global.hp - 0.10;
   }
}else{
   if !shieldOn{
      status_blend = "normal";
   }
}


}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot v2025

if global.gameMove{
    if shoot{
        global.hp -= .020;
        if instance_exists(oTarget){
            targetList = ds_list_create();
            if msgCount &lt; msgMax{
                msgCount += 1;
            }
            if dir == 1{
                collision_rectangle_list(view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView],view_xview[global.myView]+view_wview[global.myView] , view_yview[global.myView]+view_hview[global.myView], oEnemy, false, true,targetList,true);
                collision_rectangle_list(view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView],view_xview[global.myView]+view_wview[global.myView] , view_yview[global.myView]+view_hview[global.myView], oMcChicken, false, true,targetList,true);
                collision_rectangle_list(view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView],view_xview[global.myView]+view_wview[global.myView] , view_yview[global.myView]+view_hview[global.myView], oShootaway_par, false, true,targetList,true);
            }else{
                collision_rectangle_list(view_xview[global.myView],view_yview[global.myView],view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView]+view_hview[global.myView], oEnemy, false, true,targetList,true);
                collision_rectangle_list(view_xview[global.myView],view_yview[global.myView],view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView]+view_hview[global.myView], oMcChicken, false, true,targetList,true);
                collision_rectangle_list(view_xview[global.myView],view_yview[global.myView],view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView]+view_hview[global.myView], oShootaway_par, false, true,targetList,true);
            }
        
            if ds_list_size(targetList) &gt; 0{
                var size = ds_list_size(targetList);       
                if i &lt; size &amp;&amp; i &lt; 8{ //i &lt; size
                    target = ds_list_find_value(targetList, i);
                    i += 1;
                    direction = point_direction(x,playerHeight-5, target.x+target.x_offset, target.y+target.y_offset);
                    max_length = 200;
    
                    //create laser        
                    for(j = 0; j &lt; max_length; j+=1){
                        lx = x + lengthdir_x(j, direction);
                        ly = playerHeight-5 + lengthdir_y(j, direction);
                        if(collision_point(lx, ly, oBlock, true, true))
                        or(collision_point(lx, ly, oTarget, true, true)){
                            break;
                        }
                    }
                    height = sin(random(1));           
                
                    if collision_point(lx,ly,oTarget,true,true){
                        fodder = instance_position(lx,ly,oTarget)
                        with fodder{hp -= 2; image_blend = choose(c_red,c_white);}}
                }else{
                    i = 0;
                }
            }else{
                ds_list_clear(targetList);
                target = 0;
            }
        }else{
            ds_list_clear(targetList);
            target = 0;
        }
    
        if target == 0{
            ds_list_clear(targetList);
            direction = point_direction(x,playerHeight-5, view_xview[global.myView]+180*dir, y-4);
            global.hp -= .020;
            max_length = 185;

            for(j = 0; j &lt; max_length; j+=1){
                lx = x + lengthdir_x(j, direction);
                ly = playerHeight-5 + lengthdir_y(j, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
            height = sin(random(1));
        }
    }else{
        ds_list_clear(targetList);
        with (target){
            image_blend = c_white;
        }       
    }
           
    if msgCount &gt;= msgMax{
        talking = true;
    }  
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot working one( middle ground)
/*
if global.gameMove{
var is_x = x; // the players x position
var is_y = y; // the players y position
var dist = 100000; // arbitrary large number for a later comparison
var target = noone; // initialise local variables
var is_target = oTarget;
var is_block = oBlock;
var is_false = false;
var is_true = true;
var new_x, new_y, coll, new_dist; // initialise local variables

with (is_target){ // loops through all target objects
    new_x = x; // sets current new_x to that target objects' x
    new_y = y; // sets current new_x to that target objects' y
    
    if collision_line(new_x, new_y, is_x, is_y, oBlock, is_false, is_false){ // wall object tests for collision being true. 
        coll = is_true;
    }else{
        coll = is_false;
    }
    
    if !coll{
        new_dist = point_distance(new_x, new_y, is_x, is_y); // collision is false, so gets distance  
        if (new_dist &lt; dist) { // if distance is less than the value stored in 'dist'
            target = id; // sets final target id to 'id'
            dist = new_dist; // sets 'dist' to new value
        }
    }
}

    //right of Howard
    if instance_exists(target){
        if ((target.bbox_right &gt;= view_xview[global.myView]+120) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 240) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + 136) &amp;&amp; dir == 1){
            if (!collision_line(x, playerHeight-5, target.x, target.y, oBlock, false, true)){
                if shoot{
                    isShooting = true;
                    if msgCount &lt; msgMax{
                        msgCount += 1;
                    }
                    global.hp -= .020;
                    direction = point_direction(x,playerHeight-5, target.x, target.y);
                    max_length = 180;
    
                    //create laser
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = playerHeight-5 + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                        break;
                        }
                    }
                    height = sin(random(1));
    
                    // take damage          
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
                
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                }
            } else {target = noone; myTarget = "None"}
        //left of Howard
        }else if ((target.bbox_right &gt; view_xview[global.myView]) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 120) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + 136) &amp;&amp; dir == -1){
            if (!collision_line(x, playerHeight-5, target.x, target.y, oBlock, false, true)){
                if shoot{
                    isShooting = true;
                    if msgCount &lt; msgMax{
                        msgCount += 1;
                    }
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    //create laser
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = playerHeight-5 + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                            break;
                        }
                    }
    
                    // take damage
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
    
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                }
           }
        }else {target = noone; myTarget = "None"}
    }else {target = noone; myTarget = "None"}
    
    if target == noone{
        if shoot{
            isShooting = true;
            global.hp -= .020;
            direction = point_direction(x,playerHeight-5, view_xview[global.myView]+180*dir, y-4);
            max_length = 180;
    
            for(i = 0; i &lt; max_length; i+=1){
                lx = x + lengthdir_x(i, direction);
                ly = playerHeight-5 + lengthdir_y(i, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
        }else{
            isShooting = false;
        }
    }
    if msgCount &gt;= msgMax{
        talking = true;

    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot (oldest)
/*
if global.gameMove{
    if instance_exists(oTarget){
        if !collision_line(x,y,instance_nearest(x,y,oTarget).x,instance_nearest(x,y,oTarget).y, oBlock,false,true){
            target = instance_nearest(x,y,oTarget);
            myTarget = object_get_name(target.object_index)
        }else{
            target = instance_nth_nearest(x,y,oTarget,5);
            myTarget = object_get_name(target.object_index)
        }
    }
    
    if instance_exists(target){
        if ((target.bbox_right &gt;= view_xview[global.myView]+120) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 240) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + 136) &amp;&amp; dir == 1){
            if (!collision_line(x, y, target.x, target.y, oBlock, false, true)){
                if shoot{
                    isShooting = true;
                    if msgCount &lt; msgMax{
                        msgCount += 1;
                    }
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = y + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                        break;
                        }
                    }
                    height = sin(random(1));
    
                    // take damage          
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
                
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                    target = noone;
                    myTarget = "None"
                    
                }
            }
           else {target = noone; myTarget = "None"}
    
        }else if ((target.bbox_right &gt; view_xview[global.myView]) &amp;&amp; (target.bbox_left &lt; view_xview[global.myView] + 120) &amp;&amp; (target.bbox_bottom &gt; view_yview[global.myView]) &amp;&amp; (target.bbox_top &lt; view_yview[global.myView] + 136) &amp;&amp; dir == -1)
            {
            if (!collision_line(x, y, target.x, target.y, oBlock, false, true))
                {
                if shoot{
                    isShooting = true;
                    if msgCount &lt; msgMax{
                        msgCount += 1;
                    }
                    global.hp -= .020;
                    direction = point_direction(x,y, target.x, target.y);
                    max_length = 180;
    
                    for(i = 0; i &lt; max_length; i+=1){
                        lx = x + lengthdir_x(i, direction);
                        ly = y + lengthdir_y(i, direction);
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                            break;
                        }
                    }
    
                    // take damage
                    with (target){
                         hp -=1;
                         image_blend = choose(c_red,c_white);
                    }
    
                }else{
                    isShooting = false;
                    with (target){
                        image_blend = c_white;
                    }
                    target = noone;
                    myTarget = "None"
                }
           }
        else {target = noone; myTarget = "None"}
        }
    else {target = noone; myTarget = "None"}
    }else {target = noone; myTarget = "None"}
    
    if target == noone{
        if shoot{
            isShooting = true;
            global.hp -= .020;
            direction = point_direction(x,y, view_xview[global.myView]+180*dir, y-4);
            max_length = 180;
    
            for(i = 0; i &lt; max_length; i+=1){
                lx = x + lengthdir_x(i, direction);
                ly = y + lengthdir_y(i, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
        }else{
            isShooting = false;
        }
    }
    if msgCount &gt;= msgMax{
        talking = true;

    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot (refurbished, experimental)
/*
if global.gameMove{
    if shoot{
        global.hp -= .020;
        if instance_exists(oTarget){
            if msgCount &lt; msgMax{
                msgCount += 1;
            }
            if dir == 1{
                enemy_list = collision_rectangle_list(view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView],view_xview[global.myView]+view_wview[global.myView] , view_yview[global.myView]+view_hview[global.myView], oTarget, false, true);
            }else{
                enemy_list = collision_rectangle_list(view_xview[global.myView],view_yview[global.myView],view_xview[global.myView]+(view_wview[global.myView]/2), view_yview[global.myView]+view_hview[global.myView], oTarget, false, true);
            }
        
            if enemy_list &gt; 0{
                var size = ds_list_size(enemy_list);       
                if i &lt; size{
                    target = ds_list_find_value(enemy_list, i);
                    i += 1;
                    direction = point_direction(x,playerHeight-5, target.x, target.y);
                    max_length = 200;
    
                    //create laser        
                    for(j = 0; j &lt; max_length; j+=1){
                        lx = x + lengthdir_x(j, direction) + 2;
                        ly = playerHeight-5 + lengthdir_y(j, direction) + 2;
                        if(collision_point(lx, ly, oBlock, false, true))
                        or(collision_point(lx, ly, oTarget, false, true)){
                            break;
                        }
                    }
                    height = sin(random(1));           
                
                    if collision_point(lx,ly,target,false,true){with target{hp -= 2; image_blend = choose(c_red,c_white);}}
                }else{
                    i = 0;
                }
            }else{
                target = 0;
            }
        }else{
            target = 0;
        }
    
        if target == 0{
            direction = point_direction(x,playerHeight-5, view_xview[global.myView]+180*dir, y-4);
            global.hp -= .020;
            max_length = 185;

            for(j = 0; j &lt; max_length; j+=1){
                lx = x + lengthdir_x(j, direction);
                ly = playerHeight-5 + lengthdir_y(j, direction);
                if(collision_point(lx, ly, oBlock, false, true))
                or(collision_point(lx, ly, oTarget, false, true)){
                    break;
                }
            }
            height = sin(random(1));
        }
    }else{
        with (target){
            image_blend = c_white;
        }       
    }
           
    if msgCount &gt;= msgMax{
        talking = true;
    }  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lose o2/hp in water
if global.gameMove{
    if underWater{
        air -= .06;
    }else{
        air = 100;
    }
    
    if air &lt; 0 {
        global.hp -= .5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Horizontal Platform
if global.gameMove{  
    // Move with platform
    if place_meeting(x,y+1, oHplat){
        instance = instance_place(x,y+1,oHplat);
        if instance.dir = 1 &amp;&amp; place_free (x+2,y){
            x += 1;
        }else if instance.dir = -1 &amp;&amp; place_free(x-2,y){
            x -= 1;
        }else if instance.dir = 0{
            //
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Push Block
if global.gameMove{
    instRight = instance_place(x + 2,y,oPush);
    instLeft = instance_place(x - 2,y,oPush);
    
    if instRight != noone{
        if right and big{
            with instRight{
                if place_empty(x + 2,y){
                    x += 2;
                }else if instance_place(x+2,y,oLazerVert){
                    x += 2;
                }
            }
        }
    }else if instLeft != noone{
        if left and big{
            with instLeft{
                if place_empty(x - 2,y){
                    x -= 2;
                }else if instance_place(x-2,y,oLazerVert) {
                    x -= 2;
                }        
            }
        }
    }
    
    // Move with block on conveyor belt
    if place_meeting(x,y+1,oPush){
        if place_empty (x + 2,y) &amp;&amp; place_empty(x - 2,y){
            if status == "stand" {x += oPush.hspeed;}
        }else if instance_place(x-2,y,oLazerVert) || instance_place(x+2,y,oLazerVert) {  
            if status == "stand" {x += oPush.hspeed;}
        }else{
            if status == "stand" {x = xprevious;}
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose Sprite &amp; blend
if global.gameMove{
    if status == "stand"{
       if char == "how" {sprite_index = sHoward_stand;}else if char == "troop" {sprite_index = sTrooper; image_speed = 0;} else if char == "gumi"{sprite_index = sNPC; image_speed = 0; image_index = 0; }
    }else if status == "run"{
       if char == "how" {sprite_index = sHoward_run;}else if char = "troop" {sprite_index = sTrooper;} else if char == "gumi"{sprite_index = sNPC; image_speed = .75}
    }else if status == "jump"{
        if jumpBoots{
            if char == "how" {sprite_index = sHoward_jump_jet;}else if char = "troop" {sprite_index = sTrooper; image_speed = 0;} else if char == "gumi"{sprite_index = sNPC;  image_index = 4; image_speed = 0;}
        }else{
           if char == "how" {sprite_index = sHoward_jet;}else if char = "troop" {sprite_index = sTrooper; image_speed = 0;} else if char == "gumi"{sprite_index = sNPC; image_index = 4; image_speed = 0;}
        }
    }else if status == "fall"{
        if jumpBoots{
            if char == "how" {sprite_index = sHoward_jump_jet;}else if char = "troop" {sprite_index = sTrooper; image_speed = 0;} else if char == "gumi"{sprite_index = sNPC;  image_index = 9; image_speed = 0;}
        }else{
           if char == "how" {sprite_index = sHoward_jet;}else if char = "troop" {sprite_index = sTrooper; image_speed = 0;} else if char == "gumi"{sprite_index = sNPC; image_index = 9; image_speed = 0;}
        }
    }

// flashing player colors (based on status_blend)
    if status_blend == "normal"{
        blend = c_white;
    }else if status_blend == "shield"{
        blend = choose(c_lime, c_aqua, c_blue);
    }else if status_blend == "zap"{
        blend = choose(c_blue, c_white, c_gray, c_aqua);
    }else if status_blend == "hurt"{
        blend = choose(c_red, c_white);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Things

// toggle debug
if debugKey{
    if !global.debug{
        global.debug = true;
        //global.gameMove = false;
    }else{
        global.debug = false;
        //global.gameMove = true;
    }
}


if global.debug{
    global.hp = 100;
    hasTrans = true;
    jumpHeight = 999;
    
    // test chatter
    if talkKey{
        if talk == ""{
            talk = choose(
                "Sup, I'm Howard",
                "Poopy",
                "I dont give a hoot",
                "YEAUUH"
            )
            alarm[2] = 100;
        }
    }
    
    if vitaSkipLevel{
        if room == rm_1 {room_goto(rm_win);}
        else if room == rm_2 {room_goto(rm_win2);}
        else if room == rm_3 {room_goto(rm_win3);}
    }
    
    // insta win
    if keyboard_check_pressed(ord('N')){
        if room == rm_1 {room_goto(rm_win);}
        else if room == rm_2 {room_goto(rm_win2);}
        else if room == rm_3 {room_goto(rm_win3);}
    }
    
    
    //noclip
    if !global.gameMove {
        if left{ x-=2;} 
        else if right{ x+=2;}
        if jump{ y-=2;} 
        else if down_dbg{ y+=2;}
    } 
      
}else{  
    if jumpBoots{
        jumpHeight = 100;
    }else{
        jumpHeight = 52;
    }
}

// restart room
    if keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('R')){
        audio_stop_all();
        room_restart();  
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Commit sudoku
if killKey{
    global.hp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oNext">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goto target room
room_goto(oNext.level);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oContinue">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup continue
if global.contCount &lt; 2 &amp;&amp; global.continues &lt; 3 {
    audio_play_sound(snd_tada,1,0);
    audio_play_sound(snd_pickup,1,0);

    global.contCount += 1;
    talk = "Howard Amulet " + string(global.contCount) + "/3"
    alarm[2] = 100;

    with other{
        score += 500;
        instance_destroy();
    }
}else if global.contCount == 2 &amp;&amp; global.continues &lt; 3 {
    audio_play_sound(snd_tada,1,0);
    audio_play_sound(snd_pickup,1,0);
    
    global.contCount += 1;
    global.continues += 1;
    
    talk = "Continue!!"
    global.contCount = 0;
    alarm[2] = 100;
    
    with other{
        score += 500;
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oJump">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Jump Boots
jumpHeight = 100;
jumpBoots = true;
audio_play_sound(snd_pickup,1,0);

talk = "Jump Boost!";
alarm[2] = 100;

with other{
     instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oShrink">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Shrinker
hasTrans = true;
audio_play_sound(snd_pickup,1,0);

talk = "Shrink!"
alarm[2] = 100;

with other{
     score += 500;
     instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Background stuff
background_x = x*0.5;
background_y = y*0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// pause


if pause &amp;&amp; !global.gameMove{
    draw_sprite_ext(sPause,0,0,0,display_get_width(),display_get_height(),image_angle,image_blend,image_alpha);
}

if global.touch{
    display_set_gui_size(960, 544);
   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Player Height
if big{
   playerHeight = y;
}else{
   playerHeight = y + 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw shit
draw_sprite_ext(sprite_index, image_index, x, y, sizex*dir, sizey, image_angle, blend, image_alpha ); //spr

// laser
if shoot &amp;&amp; global.gameMove{
    // pulse laser code: thanks to reddit users [FmMan3] and [oldmankc]
    height = sin(random(1));
    if char == "how"{
        draw_set_color(c_blue);
        draw_line_width(x-1, playerHeight-5, lx,ly, (height * 4) + 0.1);
        draw_set_color(c_aqua);
        draw_line_width(x-1, playerHeight-5, lx,ly, (height * 1) + 0.1);
        draw_set_color(c_white);
        draw_line_width(x-1, playerHeight-5, lx,ly, (height * 1) + 0.1);
    }else if char == "troop"{
        draw_set_color(c_red);
        draw_line_width(x-1, playerHeight-5, lx,ly, (height * 4) + 0.1);
        draw_set_color(c_orange);
        draw_line_width(x-1, playerHeight-5, lx,ly, (height * 1) + 0.1);
        draw_set_color(c_yellow);
        draw_line_width(x-1, playerHeight-5, lx,ly, (height * 1) + 0.1);
    }else if char == "gumi"{
        draw_set_color(c_green);
        draw_line_width(x-1, playerHeight, lx,ly, (height * 4) + 0.1);
        draw_set_color(c_yellow);
        draw_line_width(x-1, playerHeight, lx,ly, (height * 1) + 0.1);
        draw_set_color(c_white);
        draw_line_width(x-1, playerHeight, lx,ly, (height * 1) + 0.1);
    }
}else{}

// Draw chatter
draw_set_color(c_yellow);
draw_set_font(fnt_system);
draw_set_halign(fa_middle);
draw_text(x,playerHeight-24,talk);


// debig
if global.debug{
    draw_sprite_ext(mask_index,0,x,y,1,1,0,c_aqua,0.5);
    //draw_text(x,playerHeight-36,string(msgCount) + "/" + string(msgMax));
    draw_text(x,playerHeight-36,"X:" +string(round(x)) + "#Y:" + string(round(y)));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.debug{
    myRoom = get_string("Enter room name: ","rm_1");
    room_goto(asset_get_index(myRoom));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
